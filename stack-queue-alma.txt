
   loop(){
    // slow fast

    while(slow!=null && fast!=null){
       if(slow==fast){
        return true;
       }else{
        slow=slow.next;
        fast=fast.next.next;
       }
    }
   }

   removeLoop(){
    // slow fast

    while(slow!=null && fast!=null){
       if(slow==fast){
        return true;
       }else{
        slow=slow.next;
        fast=fast.next.next;
       }
    }
    let temp = head;
    while(head!=slow){
        head=head.next;
        slow=slow.next
    }

    slow.n=null
   }

   // palnindrom linked list

// find intersection of two linked list

   intersection(head1, head2){
    while(head1!=null){
        while(head2!=null){
            if(head1.data==head2.data){
                return head1;
            }
            head2=head2.next;
        }
        head1.next
    }
   }

   intersection2(head1, head2){
    let set = new Set()
    while(head1!=null){
        set.add(head1)
        head1.next
    }
    while(head2!=null){
        if(set.has(head2)){
            return head2;
        }
        head2=head2.next;
    }
   }

   // sort stack

   sortStack(s){
    if(s.e)
   }

}

----




----

// sort stack


function sortStack(s){
    if(!s.isEmpty){
        let top = s.pop;
        sortStack(s);
        sortedInsert(s, top)
    }
}

function sortedInsert(s, t){
    if(s.isEmpty() || t>s.peek()){
        s.push(t)
    } else{
        let temp = s.pop()
        sortedInsert(s, t)
        s.push(temp)
    }
}

//stack using linked list

    class NodeStack{
        constructor(){
            this.top=null;
        }

        pop(){
            if(this.top != null){
                this.top=this.top.next
            } else{
                console.log('its empty')
            }
        }

        push(val){
            let node= new Node(val)
            node.next=this.top;
            this.top=node;
        }
    }

    let n = new NodeStack()
    n.push()
